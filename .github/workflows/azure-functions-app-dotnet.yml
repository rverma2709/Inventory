# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.

# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.


name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: Inventory    # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '8.0.x'                 # set this to the .NET Core version to use

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o "${{env.DOTNET_ROOT}}/myapp"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: "${{env.DOTNET_ROOT}}/myapp"

  deploy:
    permissions:
      contents: none
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.INVENTORY }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

# name: Deploy DotNet project to Azure Function App

# on:
#   push:
#     branches: ["master"]

# env:
#   AZURE_FUNCTIONAPP_NAME: 'Inventory'   # set this to your function app name on Azure
#   AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'       # set this to the path to your function app project, defaults to the repository root
#   DOTNET_VERSION: '6.0.x'                   # set this to the dotnet version to use (e.g. '2.1.x', '3.1.x', '5.0.x')

# jobs:
#   build-and-deploy:
#     runs-on: windows-latest # For Linux, use ubuntu-latest
#     environment: dev
#     steps:
#     - name: 'Checkout GitHub Action'
#       uses: actions/checkout@v4

#     # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
#     # - name: 'Login via Azure CLI'
#     #   uses: azure/login@v1
#     #   with:
#     #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }} # set up AZURE_RBAC_CREDENTIALS secrets in your repository

#     - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
#       uses: actions/setup-dotnet@v4
#       with:
#         dotnet-version: ${{ env.DOTNET_VERSION }}

#     - name: 'Resolve Project Dependencies Using Dotnet'
#       shell: pwsh # For Linux, use bash
#       run: |
#         pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
#         dotnet build --configuration Release --output ./output
#         popd
#         working-directory: 

#     - name: 'Run Azure Functions Action'
#       uses: Azure/functions-action@v1
#       id: fa
#       with:
#         app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
#         package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
#         publish-profile: ${{ secrets.INVENTORY }} # Remove publish-profile to use Azure RBAC
